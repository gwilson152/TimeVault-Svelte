// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define user roles as an enum
enum UserRole {
  ADMIN        // System administrator with full access
  AGENT        // Staff member who can manage tickets and time entries
  CLIENT_ADMIN // Client administrator who can manage their client's data
  CLIENT_USER  // Regular client user with limited access
}

model User {
  id               String         @id @default(uuid())
  email            String         @unique
  name             String
  passwordHash     String
  role             UserRole       @default(CLIENT_USER)
  clientId         String?        // Optional: only for CLIENT_ADMIN and CLIENT_USER roles
  client           Client?        @relation(fields: [clientId], references: [id])
  active           Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  timeEntries      TimeEntry[]    // Time entries created by this user
  ticketNotes      TicketNote[]   // Notes created by this user
  lastLoginAt      DateTime?      // Track last login time

  @@index([clientId])
  @@map("users")
}

model Client {
  id                   String                      @id @default(uuid())
  name                 String
  rate                 Float
  type                 String                      @default("business") // "business" | "container" | "individual"
  parentId             String?
  parent               Client?                     @relation("ClientHierarchy", fields: [parentId], references: [id])
  children             Client[]                    @relation("ClientHierarchy")
  createdAt            DateTime                    @default(now())
  updatedAt            DateTime                    @updatedAt
  timeEntries          TimeEntry[]
  invoices             Invoice[]
  tickets              Ticket[]
  billingRateOverrides ClientBillingRateOverride[]
  users                User[]                      // Users associated with this client

  @@index([parentId])
  @@map("clients")
}

model TimeEntry {
  id            String       @id @default(uuid())
  description   String
  startTime     DateTime
  endTime       DateTime?
  minutes       Float        @default(0) // Duration in minutes (calculated from start/end or manually set)
  date          DateTime
  clientId      String?
  billable      Boolean      @default(true)
  billed        Boolean      @default(false)
  billedRate    Float? // Rate at which the time entry was billed (considers manual rate on invoice)
  locked        Boolean      @default(false) // Prevents editing of the time entry  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  client        Client?      @relation(fields: [clientId], references: [id])
  invoice       Invoice?     @relation(fields: [invoiceId], references: [id])
  invoiceId     String?
  ticketId      String?
  ticket        Ticket?      @relation(fields: [ticketId], references: [id])
  billingRateId String?
  billingRate   BillingRate? @relation(fields: [billingRateId], references: [id])
  userId        String?      // The user who created this time entry
  user          User?        @relation(fields: [userId], references: [id])

  @@index([ticketId])
  @@index([clientId])
  @@index([invoiceId])
  @@index([billingRateId])
  @@index([userId])
  @@map("time_entries")
}

model Invoice {
  id            String         @id @default(uuid())
  invoiceNumber String? // Manual invoice number
  clientId      String
  totalMinutes  Float
  totalAmount   Float
  totalCost     Float          @default(0)
  totalProfit   Float          @default(0)
  date          DateTime       @default(now())
  client        Client         @relation(fields: [clientId], references: [id])
  entries       TimeEntry[]
  addons        InvoiceAddon[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([clientId])
  @@map("invoices")
}

model InvoiceAddon {
  id            String       @id @default(uuid())
  invoiceId     String
  description   String
  amount        Float // Price per unit
  cost          Float        @default(0) // Cost per unit
  quantity      Float        @default(1) // Number of units
  profit        Float        @default(0) // Calculated: (amount * quantity) - (cost * quantity)
  ticketAddonId String?
  ticketAddon   TicketAddon? @relation(fields: [ticketAddonId], references: [id])
  invoice       Invoice      @relation(fields: [invoiceId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([invoiceId])
  @@index([ticketAddonId])
  @@map("invoice_addons")
}

model TicketAddon {
  id            String         @id @default(uuid())
  ticketId      String
  description   String
  amount        Float
  cost          Float          @default(0)
  quantity      Float          @default(1)
  profit        Float          @default(0)
  billed        Boolean        @default(false)
  ticket        Ticket         @relation(fields: [ticketId], references: [id])
  invoiceAddons InvoiceAddon[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([ticketId])
  @@map("ticket_addons")
}

model Ticket {
  id          String        @id @default(cuid())
  title       String
  description String?
  statusId    String        @default("open")
  clientId    String
  client      Client        @relation(fields: [clientId], references: [id])
  timeEntries TimeEntry[]
  addons      TicketAddon[]
  status      TicketStatus  @relation(fields: [statusId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  notes       TicketNote[]  // Relation to ticket notes

  @@index([clientId])
  @@index([statusId])
}

// New model for ticket notes
model TicketNote {
  id        String   @id @default(uuid())
  ticketId  String
  content   String   // The note content
  isInternal Boolean @default(false) // Whether the note is internal (only visible to agents/admins)
  userId    String   // The user who created the note
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ticketId])
  @@index([userId])
  @@map("ticket_notes")
}

model TicketStatus {
  id        String   @id @default(uuid())
  name      String   @unique
  color     String   @default("#718096") // Default gray color
  isDefault Boolean  @default(false)
  isClosed  Boolean  @default(false)
  sortOrder Int      @default(0)
  tickets   Ticket[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ticket_statuses")
}

model Settings {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  category    String   @default("general")
  label       String
  description String?
  type        String   @default("string") // string, number, boolean, json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("settings")
}

model BillingRate {
  id          String                      @id @default(uuid())
  name        String                      @unique
  rate        Float
  cost        Float                       @default(0) // Internal cost rate for profit calculations
  description String?
  isDefault   Boolean                     @default(false)
  createdAt   DateTime                    @default(now())
  updatedAt   DateTime                    @updatedAt
  overrides   ClientBillingRateOverride[]
  timeEntries TimeEntry[]

  @@map("billing_rates")
}

model ClientBillingRateOverride {
  id           String      @id @default(uuid())
  clientId     String
  baseRateId   String
  overrideType String // "percentage" | "fixed"
  value        Float
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  client       Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  baseRate     BillingRate @relation(fields: [baseRateId], references: [id], onDelete: Cascade)

  @@unique([clientId, baseRateId])
  @@index([clientId])
  @@index([baseRateId])
  @@map("client_billing_rate_overrides")
}
